<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://xswnb.github.io/xswnb/atom.xml" rel="self"/>
  
  <link href="https://xswnb.github.io/xswnb/"/>
  <updated>2024-02-21T09:52:34.489Z</updated>
  <id>https://xswnb.github.io/xswnb/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>FSM售卖机</title>
    <link href="https://xswnb.github.io/xswnb/2024/02/21/FSM%E5%94%AE%E5%8D%96%E6%9C%BA/"/>
    <id>https://xswnb.github.io/xswnb/2024/02/21/FSM%E5%94%AE%E5%8D%96%E6%9C%BA/</id>
    <published>2024-02-21T09:48:23.000Z</published>
    <updated>2024-02-21T09:52:34.489Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Verilog中的自动售卖机FSM设计教程"><a href="#Verilog中的自动售卖机FSM设计教程" class="headerlink" title="Verilog中的自动售卖机FSM设计教程"></a>Verilog中的自动售卖机FSM设计教程</h1><p>在这篇教程中，我们将通过设计一个简单的自动售卖机来学习如何使用Verilog语言实现有限状态机（FSM）。自动售卖机将接受两种硬币：5元和10元，以售卖一个15元的商品为例。</p><h2 id="设计目标"><a href="#设计目标" class="headerlink" title="设计目标"></a>设计目标</h2><p>我们的目标是设计一个FSM，它可以：</p><ul><li>接受5元和10元两种输入</li><li>当累计金额达到商品价格15元时，释放商品</li><li>如果投入超过商品价格，计算并返回找零</li></ul><h2 id="设计步骤"><a href="#设计步骤" class="headerlink" title="设计步骤"></a>设计步骤</h2><h3 id="1-定义状态"><a href="#1-定义状态" class="headerlink" title="1. 定义状态"></a>1. 定义状态</h3><p>首先，我们需要定义FSM的所有可能状态。对于自动售卖机，我们可以设定以下状态：</p><ul><li><code>S0</code>：初始状态（无钱）</li><li><code>S5</code>：已接收5元</li><li><code>S10</code>：已接收10元</li><li><code>S15</code>：已累计15元，准备释放商品并返回初始状态</li></ul><h3 id="2-定义输入"><a href="#2-定义输入" class="headerlink" title="2. 定义输入"></a>2. 定义输入</h3><p>我们的自动售卖机接受两种输入：</p><ul><li><code>coin5</code>：投入5元</li><li><code>coin10</code>：投入10元</li></ul><h3 id="3-状态转移和输出逻辑"><a href="#3-状态转移和输出逻辑" class="headerlink" title="3. 状态转移和输出逻辑"></a>3. 状态转移和输出逻辑</h3><p>接下来，我们需要定义在各种输入下，从一个状态到另一个状态的转移，以及相应的输出行为。</p><h3 id="4-Verilog代码实现"><a href="#4-Verilog代码实现" class="headerlink" title="4. Verilog代码实现"></a>4. Verilog代码实现</h3><h4 id="定义模块和端口"><a href="#定义模块和端口" class="headerlink" title="定义模块和端口"></a>定义模块和端口</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> VendingMachineFSM(</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span> clk,</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span> reset,</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span> coin5,</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span> coin10,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> <span class="keyword">release</span>,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">1</span>:<span class="number">0</span>] change</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//状态和参数定义</span></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">1</span>:<span class="number">0</span>] state;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">1</span>:<span class="number">0</span>] next_state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">parameter</span> S0 = <span class="number">2&#x27;b00</span>, S5 = <span class="number">2&#x27;b01</span>, S10 = <span class="number">2&#x27;b10</span>, S15 = <span class="number">2&#x27;b11</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//状态转移逻辑</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">posedge</span> reset) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> (reset) state &lt;= S0;</span><br><span class="line">    <span class="keyword">else</span> state &lt;= next_state;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//下一个状态和输出的决定</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">case</span> (state)</span><br><span class="line">        S0: <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (coin5) next_state = S5;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (coin10) next_state = S10;</span><br><span class="line">            <span class="keyword">else</span> next_state = S0;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        S5: <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (coin5) next_state = S10;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (coin10) next_state = S15;</span><br><span class="line">            <span class="keyword">else</span> next_state = S5;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        S10: <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (coin5) next_state = S15;</span><br><span class="line">            <span class="keyword">else</span> next_state = S10;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        S15: <span class="keyword">begin</span></span><br><span class="line">            next_state = S0; <span class="comment">// 商品释放后返回初始状态</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">default</span>: next_state = S0;</span><br><span class="line">    <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//控制输出</span></span><br><span class="line"><span class="keyword">always</span> @(state) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">case</span> (state)</span><br><span class="line">        S15: <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">release</span> = <span class="number">1&#x27;b1</span>;</span><br><span class="line">            change = <span class="number">0</span>; <span class="comment">// 假设顾客投入金额恰好</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">release</span> = <span class="number">1&#x27;b0</span>;</span><br><span class="line">            change = <span class="number">0</span>; <span class="comment">// 无需找零</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过本教程，我们学习了如何使用Verilog设计一个简单的自动售卖机FSM。这个例子展示了FSM的基本概念，状态定义，以及状态转移逻辑的实现方法。希望这能帮助你在使用Verilog进行数字设计时有一个好的开始。 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Verilog中的自动售卖机FSM设计教程&quot;&gt;&lt;a href=&quot;#Verilog中的自动售卖机FSM设计教程&quot; class=&quot;headerlink&quot; title=&quot;Verilog中的自动售卖机FSM设计教程&quot;&gt;&lt;/a&gt;Verilog中的自动售卖机FSM设计教程&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>DVP接口</title>
    <link href="https://xswnb.github.io/xswnb/2024/02/21/DVP%E6%8E%A5%E5%8F%A3/"/>
    <id>https://xswnb.github.io/xswnb/2024/02/21/DVP%E6%8E%A5%E5%8F%A3/</id>
    <published>2024-02-21T09:25:41.000Z</published>
    <updated>2024-02-21T09:28:50.758Z</updated>
    
    <content type="html"><![CDATA[<h4 id="sensor接口之DVP"><a href="#sensor接口之DVP" class="headerlink" title="sensor接口之DVP"></a>sensor接口之DVP</h4><ul><li>[什么是DVP]</li><li>[DVP时序]<ul><li>[PCLK、HSYNC、VSYNC对应关系]</li><li>[sensor并行输出说明]</li></ul></li><li>[实际测量DVP信号]</li></ul><h2 id="什么是DVP"><a href="#什么是DVP" class="headerlink" title="什么是DVP"></a>什么是DVP</h2><p>DVP（Digital Video Port） 是传统的sensor输出接口，采用并行输出方式，d数据位宽有8bit、10bit、12bit、16bit，是CMOS电平信号（重点是非差分信号），PCLK最大速率为96MHz，接口如下图：</p><p><img src="https://ask.qcloudimg.com/http-save/yehe-8223537/2d4a9e6bf6b27a879ffa201de26ee0da.png" alt="DVP接口"></p><p>DVP接口</p><p><strong>PCLK</strong>：pixel clock ,像素时钟，每个时钟对应一个像素数据； <strong>HSYNC</strong>：horizonal synchronization，行同步信号 <strong>VSYNC</strong>：vertical synchronization，帧同步信号； <strong>DATA</strong>：像素数据，视频数据，具体位宽要看ISP是否支持； <strong>XCLK</strong>：或者MCLK，ISP芯片输出给驱动sensor的时钟； <strong>SCL</strong>，<strong>SDA</strong>：IIC用来读写sensor的寄存器，配置sensor。</p><h2 id="DVP时序"><a href="#DVP时序" class="headerlink" title="DVP时序"></a>DVP时序</h2><h3 id="PCLK、HSYNC、VSYNC对应关系"><a href="#PCLK、HSYNC、VSYNC对应关系" class="headerlink" title="PCLK、HSYNC、VSYNC对应关系"></a>PCLK、HSYNC、VSYNC对应关系</h3><p>ISP与sensor通过DVP接口连接，ISP首先会给sensor一个XCLK，sensor内部的PLL会对计算，产生PCLK，PCLK由幅面（F_W、F_H）、帧率（FPS）决定，并存在如下关系：</p><p>PCLK &#x3D; F_W * F_H * FPS</p><p>以F_W &#x3D; 3556，F_H &#x3D; 1125，A_W &#x3D; 1920， A_H &#x3D; 1080，FPS &#x3D; 25（<strong>1080P25</strong>）为例，说明几个对应关系：</p><p><img src="https://ask.qcloudimg.com/http-save/yehe-8223537/20be81f78dbedef098b25df2ac9cf903.png" alt="DVP时许"></p><p>DVP时许</p><p>注意：上图中标有错误，对照下文说明可以找出错误</p><ul><li>PCLK是一个像素传输的时间，所以<strong>HSYNC</strong>时间是<strong>PCLK</strong>的<strong>3556</strong>倍；</li><li>在这3556个像素中，只有1920个像素是有效的（A_W大小），在剩下的1636个像素点时间内sensor是<strong>不传输数据</strong>的；</li><li>VSYNC是帧同步信号，所以<strong>VSYNC</strong>时间是<strong>PCLK</strong>的<strong>3556*1125</strong>倍；</li><li>同样只有在1920*1080个<strong>有效像素</strong>时间内，sensor在传输数据；</li></ul><h3 id="sensor并行输出说明"><a href="#sensor并行输出说明" class="headerlink" title="sensor并行输出说明"></a>sensor并行输出说明</h3><p><img src="https://ask.qcloudimg.com/http-save/yehe-8223537/c3788fb223fc4138bd0549ae44c3decb.png" alt="DVP并行输出"></p><p>DVP并行输出</p><p>图中有12bit通道传输像素数据，但有些ISP芯片只能接受并行输入，会丢弃sensor端输出的低两位，这会造成<strong>低照</strong>条件下，颜色之间<strong>过度明显</strong>。</p><h2 id="实际测量DVP信号"><a href="#实际测量DVP信号" class="headerlink" title="实际测量DVP信号"></a>实际测量DVP信号</h2><ul><li><strong>XCLK</strong></li></ul><p><img src="https://ask.qcloudimg.com/http-save/yehe-8223537/ddd6874f005ec64f9a3933c7cb4006a6.png" alt="XCLK"></p><p>XCLK</p><ul><li><strong>PCLK</strong></li></ul><p><img src="https://ask.qcloudimg.com/http-save/yehe-8223537/329189f912cb98477b9db5109a9f7ddd.png" alt="PCLK"></p><p>PCLK</p><ul><li><strong>HSYNC</strong></li></ul><p><img src="https://ask.qcloudimg.com/http-save/yehe-8223537/f556d858648997f0c2e2314afe40082e.png" alt="HSYNC"></p><p>HSYNC</p><ul><li><strong>VSYNC</strong></li></ul><p><img src="https://ask.qcloudimg.com/http-save/yehe-8223537/c85e059e9aae6d670ba99b97638977de.png" alt="VSYNC"></p><p>VSYNC</p><ul><li><strong>SCL</strong></li></ul><p><img src="https://ask.qcloudimg.com/http-save/yehe-8223537/28f8fb4decd3ec7c065f1788f407cef4.png" alt="SCL"></p><p>SCL</p><ul><li><strong>视频帧同步头波形</strong></li></ul><p><img src="https://ask.qcloudimg.com/http-save/yehe-8223537/6e071212d36a403e93e872a22f9e4123.png" alt="视频帧同步"></p><p>视频帧同步</p><ul><li><strong>多波形图</strong></li></ul><p><img src="https://ask.qcloudimg.com/http-save/yehe-8223537/c48f21df15855f37aad2c18d46b7ec54.png" alt="多信号"></p><p>多信号</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;sensor接口之DVP&quot;&gt;&lt;a href=&quot;#sensor接口之DVP&quot; class=&quot;headerlink&quot; title=&quot;sensor接口之DVP&quot;&gt;&lt;/a&gt;sensor接口之DVP&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;[什么是DVP]&lt;/li&gt;
&lt;li&gt;[DVP时序</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://xswnb.github.io/xswnb/2024/02/21/hello-world/"/>
    <id>https://xswnb.github.io/xswnb/2024/02/21/hello-world/</id>
    <published>2024-02-21T06:42:45.366Z</published>
    <updated>2024-02-21T06:42:45.366Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
